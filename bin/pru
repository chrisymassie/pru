#!/usr/bin/env ruby
require 'optparse'

# enable local usage from cloned repo
root = File.expand_path("../..", __FILE__)
$LOAD_PATH << "#{root}/lib" if File.exist?("#{root}/Gemfile")

require 'pru'

usage = nil
options = {}

OptionParser.new do |opts|
  opts.banner = <<-BANNER.gsub(/^    /, "")
    Pipeable Ruby

    Use ruby in your pipes, forget about grep / sed / awk / wc ...

    Map works on each line as String
    Reduce works on all lines as Array (optional or via -r)

    Usage:
        something | pru 'map'
        something | pru 'map' 'reduce'
        something | pru '' 'reduce'
        something | pru --reduce 'reduce'

    Options:
  BANNER
  opts.on("-r", "--reduce CODE","reduce via CODE") {|code| options[:reduce] = code }
  opts.separator ''
  opts.on('-I', '--libdir DIR', 'Add DIR to load path') { |dir| $LOAD_PATH << dir }
  opts.on('--require LIB', 'Require LIB (also comma-separated)') { |lib| lib.split(',').each{|l| require l } }
  opts.on('-i', '--inplace-edit FILE', 'Edit FILE inplace') { |file| options[:file] = file }
  opts.separator ''
  opts.on("-h", "--help","Show this.") { puts opts; exit }
  opts.on('-v', '--version','Show Version'){ require 'pru/version'; puts Pru::VERSION; exit}
  usage = opts
end.parse!

if ARGV.empty? && options.empty? # no arguments -> show usage
  puts usage
  exit
end

abort "Too many arguments, see --help" if ARGV.size > 2

map, reduce = ARGV
reduce ||= options[:reduce]
map = 'true' if !map || map.empty?

if options[:file]
  output_lines = []
  input = File.read(options[:file])
  newline = input[/\r\n|\r|\n/]
  trailing_newline = (input =~ /#{newline}\Z/)
else
  input = $stdin
end

collector = lambda do |line|
  output_lines ? output_lines << line : puts(line)
end

if reduce
  results = []
  Pru.map(input, map) { |out| results << out }
  collector.call Pru.reduce(results, reduce)
else
  Pru.map(input, map) { |out| collector.call out }
end

if options[:file]
  content = output_lines.join(newline)
  content << newline if trailing_newline
  File.write options[:file], content
end
