#!/usr/bin/env ruby
require 'optparse'

$LOAD_PATH << File.join(File.dirname(__FILE__), '..', 'lib')
require 'pru'

options = {}
OptionParser.new do |opts|
  opts.banner = <<BANNER
Pipeable Ruby

Use ruby in your pipes, forget about grep / sed / awk / wc ...

Map works on each line as String
Reduce works on all lines as Array (optional or via -r)

Usage:
    something | pru 'map' ['reduce']
    something | pru -r 'reduce'

Options:
BANNER
  opts.on("-r", "--reduce CODE","reduce via") {|code| options[:reduce] = code }

  opts.on('-I', '--libdir DIR', 'Add DIR to load path') { |dir| $LOAD_PATH << dir }
  opts.on('--require LIB', 'Require LIB (also comma-separated)') { |lib| lib.split(',').each{|l| require l } }

  opts.on("-h", "--help","Show this.") { puts opts; exit }
  opts.on('-v', '--version','Show Version'){ puts Pru::VERSION; exit}
end.parse!

map, reduce = ARGV
reduce ||= options[:reduce]
map = 'true' if not map or map.empty?

if reduce
  results = []
  Pru.map($stdin, map){|x| results << x }
  puts Pru.reduce(results, reduce)
else
  Pru.map($stdin, map){|x| puts x }
end
